{"ast":null,"code":"var _jsxFileName = \"/home/thinesh/project/spotify-clone-client/src/components/pages-components/UserPage.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport PageBanner from '../featured-components/PageBanner';\nimport PlayListFunctions from '../featured-components/PlayListFunctions';\nimport CollectionRow from '../featured-components/CollectionRow';\nimport Loading from '../featured-components/Loading';\nimport useId from '../../utilities/hooks/useId';\nimport useInfiScroll from '../../utilities/hooks/useInfiScroll';\nimport { UserContext, TokenContext, LoginContext, MessageContext } from '../../utilities/context';\nimport reqWithToken from '../../utilities/reqWithToken';\nimport putWithToken from '../../utilities/putWithToken';\nimport makeAxiosRequest from '../../utilities/makeAxiosRequest';\nexport default function UserPage({\n  query,\n  setMessage\n}) {\n  const id = useId();\n  const user = useContext(UserContext);\n  const token = useContext(TokenContext);\n  const loggedIn = useContext(LoginContext);\n  const setStatusMessage = useContext(MessageContext);\n  const [loading, setLoading] = useState(true);\n  const [bannerInfo, setbannerInfo] = useState({\n    name: '',\n    description: '',\n    user: [],\n    followers: 0,\n    primary_color: 'rgb(83, 83, 83)',\n    images: [],\n    total: 0\n  });\n  const [playLists, setplayLists] = useState([]);\n  const [setNext, lastRef] = useInfiScroll(setplayLists);\n  const [follow, setFollow] = useState(false);\n  const source = axios.CancelToken.source();\n  useEffect(() => {\n    setbannerInfo({\n      name: '',\n      description: '',\n      user: [],\n      followers: 0,\n      primary_color: 'rgb(83, 83, 83)',\n      images: [],\n      total: 0\n    });\n    setFollow(false);\n    setplayLists([]);\n    setLoading(true);\n    const [userSource, requestUser] = makeAxiosRequest(`https://api.spotify.com/v1/users/${id}`);\n    const [listSource, requestList] = makeAxiosRequest(`https://api.spotify.com/v1/users/${id}/playlists`);\n\n    const makeRequest = async () => {\n      try {\n        const [userData, listData] = await Promise.all([requestUser(), requestList()]);\n        const {\n          display_name,\n          owner,\n          followers,\n          primary_color,\n          images\n        } = userData;\n        const {\n          items,\n          total,\n          next\n        } = listData;\n        setbannerInfo(bannerInfo => ({ ...bannerInfo,\n          name: display_name,\n          user: [owner],\n          followers,\n          primary_color,\n          images,\n          total\n        }));\n        setplayLists(items);\n        setNext(next);\n        setLoading(false);\n      } catch (error) {\n        setStatusMessage(`ERROR: ${error}`);\n        setLoading(false);\n      }\n    };\n\n    if (id) {\n      makeRequest();\n    }\n\n    if (loggedIn && id) {\n      const requestFollow = reqWithToken(`https://api.spotify.com/v1/me/following/contains?type=user&ids=${id}`, token, source);\n      requestFollow().then(response => {\n        setFollow(response.data[0]);\n      }).catch(error => console.log(error));\n    }\n\n    return () => {\n      userSource.cancel();\n      listSource.cancel();\n      source.cancel();\n    }; // eslint-disable-next-line\n  }, [id]);\n\n  const followUser = () => {\n    if (loggedIn) {\n      const request = putWithToken(`https://api.spotify.com/v1/me/following?type=user&ids=${id}`, token, source, {}, follow ? 'DELETE' : 'PUT');\n      request().then(response => {\n        if (response.status === 204) {\n          if (follow) {\n            setStatusMessage(`Unsaved from your collection`);\n          } else {\n            setStatusMessage(`Saved to your collection`);\n          }\n\n          setFollow(!follow);\n        } else {\n          setStatusMessage(`ERROR: Something went wrong! Server response: ${response.status}`);\n        }\n      }).catch(error => setStatusMessage(`ERROR: ${error}`));\n    }\n  };\n\n  return loading ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listPage\",\n    style: {\n      display: playLists.length === 0 ? 'none' : 'block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageBanner, {\n    pageTitle: \"profile\",\n    bannerInfo: bannerInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playListContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playListOverlay\",\n    style: {\n      backgroundColor: `${bannerInfo.primary_color}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(PlayListFunctions, {\n    type: id === user.id ? 'none' : 'user',\n    follow: follow,\n    onFollow: followUser,\n    setMessage: setStatusMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-content\",\n    style: {\n      marginTop: '40px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CollectionRow, {\n    ref: lastRef,\n    name: \"Public Playlists\",\n    id: null,\n    playlists: playLists,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/home/thinesh/project/spotify-clone-client/src/components/pages-components/UserPage.js"],"names":["React","useState","useEffect","useContext","axios","PageBanner","PlayListFunctions","CollectionRow","Loading","useId","useInfiScroll","UserContext","TokenContext","LoginContext","MessageContext","reqWithToken","putWithToken","makeAxiosRequest","UserPage","query","setMessage","id","user","token","loggedIn","setStatusMessage","loading","setLoading","bannerInfo","setbannerInfo","name","description","followers","primary_color","images","total","playLists","setplayLists","setNext","lastRef","follow","setFollow","source","CancelToken","userSource","requestUser","listSource","requestList","makeRequest","userData","listData","Promise","all","display_name","owner","items","next","error","requestFollow","then","response","data","catch","console","log","cancel","followUser","request","status","display","length","backgroundColor","marginTop"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\nimport axios from 'axios'\n\nimport PageBanner from '../featured-components/PageBanner'\nimport PlayListFunctions from '../featured-components/PlayListFunctions'\nimport CollectionRow from '../featured-components/CollectionRow'\nimport Loading from '../featured-components/Loading'\n\nimport useId from '../../utilities/hooks/useId'\nimport useInfiScroll from '../../utilities/hooks/useInfiScroll'\nimport {UserContext, TokenContext, LoginContext, MessageContext} from '../../utilities/context'\nimport reqWithToken from '../../utilities/reqWithToken'\nimport putWithToken from '../../utilities/putWithToken'\nimport makeAxiosRequest from '../../utilities/makeAxiosRequest'\n\nexport default function UserPage({query, setMessage}) {\n    const id = useId()\n    const user = useContext(UserContext)\n    const token = useContext(TokenContext)\n    const loggedIn = useContext(LoginContext)\n    const setStatusMessage = useContext(MessageContext)\n    const [loading, setLoading] = useState(true)\n\n    const [bannerInfo, setbannerInfo] = useState({\n        name: '',\n        description: '',\n        user: [],\n        followers: 0,\n        primary_color: 'rgb(83, 83, 83)',\n        images: [],\n        total: 0\n    })\n\n    const [playLists, setplayLists] = useState([])\n    const [setNext, lastRef] = useInfiScroll(setplayLists)\n    const [follow, setFollow] = useState(false)\n    const source = axios.CancelToken.source()\n    useEffect(() => {\n        setbannerInfo({\n            name: '',\n            description: '',\n            user: [],\n            followers: 0,\n            primary_color: 'rgb(83, 83, 83)',\n            images: [],\n            total: 0\n        })\n        setFollow(false)\n        setplayLists([])\n        setLoading(true)\n        \n        const [userSource, requestUser] = makeAxiosRequest(`https://api.spotify.com/v1/users/${id}`)\n        const [listSource, requestList] = makeAxiosRequest(`https://api.spotify.com/v1/users/${id}/playlists`)\n\n        const makeRequest = async ()=> {\n            try{\n                const [userData, listData] = await Promise.all([requestUser(), requestList()])\n\n                const {display_name, owner, followers, primary_color, images} = userData\n                const {items, total, next} = listData\n                setbannerInfo(bannerInfo => ({...bannerInfo, name:display_name, user:[owner], followers, primary_color, images, total}))\n                setplayLists(items)\n                setNext(next)\n                setLoading(false)\n            }catch(error){ \n                setStatusMessage(`ERROR: ${error}`)\n                setLoading(false)\n            }   \n        }\n\n        if(id){\n            makeRequest()\n        }\n        \n        if (loggedIn && id){\n            const requestFollow = reqWithToken(`https://api.spotify.com/v1/me/following/contains?type=user&ids=${id}`, token, source)\n            requestFollow()\n                .then(response => {\n                    setFollow(response.data[0])\n                })\n                .catch(error => console.log(error))\n        }\n\n        return () => {\n            userSource.cancel()\n            listSource.cancel()\n            source.cancel()\n        }\n    // eslint-disable-next-line\n    }, [id])\n\n    const followUser = () => {\n        if (loggedIn) {\n            const request = putWithToken(`https://api.spotify.com/v1/me/following?type=user&ids=${id}`, token, source, {}, follow? 'DELETE':'PUT')\n            request()\n                .then(response => {\n                    if (response.status === 204){\n                        if (follow){\n                            setStatusMessage(`Unsaved from your collection`)\n                        }else{\n                            setStatusMessage(`Saved to your collection`)\n                        }\n                        setFollow(!follow)\n                    }else{\n                        setStatusMessage(`ERROR: Something went wrong! Server response: ${response.status}`)\n                    }\n                })\n                .catch(error => setStatusMessage(`ERROR: ${error}`))\n        }\n    }\n\n    return (\n        loading? \n        <Loading /> \n        :\n        <div className='listPage' style={{display: playLists.length===0? 'none':'block'}}>\n            <PageBanner pageTitle='profile' bannerInfo={bannerInfo}/>\n            <div className=\"playListContent\">\n                <div className=\"playListOverlay\" style={{backgroundColor: `${bannerInfo.primary_color}`}}></div>\n                <PlayListFunctions type={id === user.id? 'none':'user'} follow={follow} onFollow={followUser} setMessage={setStatusMessage}/>\n                <div className=\"page-content\" style={{marginTop: '40px'}}>\n                    <CollectionRow ref={lastRef} name='Public Playlists' id={null} playlists={playLists}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}
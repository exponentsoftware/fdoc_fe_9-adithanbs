{"ast":null,"code":"var _jsxFileName = \"/home/thinesh/project/spotify-clone-client/src/components/pages-components/AlbumPage.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nimport PageBanner from '../featured-components/PageBanner';\nimport PlayListFunctions from '../featured-components/PlayListFunctions';\nimport TrackList from '../featured-components/TrackList';\nimport Loading from '../featured-components/Loading';\nimport useId from '../../utilities/hooks/useId';\nimport useInfiScroll from '../../utilities/hooks/useInfiScroll';\nimport { TokenContext, MessageContext, PlayContext } from '../../utilities/context';\nimport putWithToken from '../../utilities/putWithToken';\nimport makeAxiosRequest from '../../utilities/makeAxiosRequest';\nexport default function AlbumPage() {\n  const id = useId();\n  const token = useContext(TokenContext);\n  const setMessage = useContext(MessageContext);\n  const updatePlayer = useContext(PlayContext);\n  const [loading, setLoading] = useState(true);\n  const highlight = useHighlight();\n  const [bannerInfo, setbannerInfo] = useState({\n    album_type: '',\n    name: '',\n    description: '',\n    user: [],\n    followers: 0,\n    primary_color: '#262626',\n    images: [],\n    release_date: ''\n  });\n  const [tracks, setTracks] = useState([]);\n  const [uri, setUri] = useState('');\n  const [setNext, lastRef] = useInfiScroll(setTracks);\n  const source = axios.CancelToken.source();\n  useEffect(() => {\n    setTracks([]);\n    setNext(null);\n    setbannerInfo({\n      album_type: '',\n      name: '',\n      description: '',\n      user: [],\n      followers: 0,\n      primary_color: '#262626',\n      images: [],\n      release_date: ''\n    });\n    setUri('');\n    setLoading(true);\n    const [source, makeRequest] = makeAxiosRequest(`https://api.spotify.com/v1/albums/${id}`);\n\n    if (id) {\n      makeRequest().then(data => {\n        const {\n          album_type,\n          name,\n          artists,\n          primary_color,\n          tracks,\n          images,\n          release_date,\n          uri\n        } = data;\n        setbannerInfo(bannerInfo => ({ ...bannerInfo,\n          album_type,\n          name,\n          user: artists,\n          primary_color,\n          images,\n          release_date\n        }));\n        setTracks(tracks.items);\n        setNext(tracks.next);\n        setUri(uri);\n        setLoading(false);\n      }).catch(error => {\n        setLoading(false);\n        setMessage(`ERROR: ${error}`);\n      });\n    }\n\n    return () => source.cancel(); // eslint-disable-next-line\n  }, [id]);\n\n  const playContext = () => {\n    const body = {\n      context_uri: uri\n    };\n    const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body);\n    request().then(response => {\n      if (response.status === 204) {\n        setTimeout(() => updatePlayer(), 500);\n      } else {\n        setMessage(`ERROR: Something went wrong! Server response: ${response.status}`);\n      }\n    }).catch(error => setMessage(`ERROR: ${error}`));\n  };\n\n  const playContextTrack = trackUri => {\n    const body = {\n      context_uri: uri,\n      offset: {\n        uri: trackUri\n      }\n    };\n    const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body);\n    request().then(response => {\n      if (response.status === 204) {\n        setTimeout(() => updatePlayer(), 500);\n      } else {\n        setMessage(`ERROR: Something went wrong! Server response: ${response.status}`);\n      }\n    }).catch(error => setMessage(`ERROR: ${error}`));\n  };\n\n  return loading ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listPage\",\n    style: {\n      display: `${tracks.length === 0 ? 'none' : 'block'}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageBanner, {\n    pageTitle: bannerInfo.album_type,\n    bannerInfo: bannerInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playListContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playListOverlay\",\n    style: {\n      backgroundColor: `${bannerInfo.primary_color}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(PlayListFunctions, {\n    onFollow: () => setMessage('Oops looks like the Spotify API does not support following albums'),\n    setMessage: setMessage,\n    playContext: playContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TrackList, {\n    ref: lastRef,\n    tracks: tracks,\n    highlight: highlight,\n    playContextTrack: playContextTrack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }))));\n}\n\nfunction useHighlight() {\n  return new URLSearchParams(useLocation().search).get('highlight');\n}","map":{"version":3,"sources":["/home/thinesh/project/spotify-clone-client/src/components/pages-components/AlbumPage.js"],"names":["React","useEffect","useState","useContext","axios","useLocation","PageBanner","PlayListFunctions","TrackList","Loading","useId","useInfiScroll","TokenContext","MessageContext","PlayContext","putWithToken","makeAxiosRequest","AlbumPage","id","token","setMessage","updatePlayer","loading","setLoading","highlight","useHighlight","bannerInfo","setbannerInfo","album_type","name","description","user","followers","primary_color","images","release_date","tracks","setTracks","uri","setUri","setNext","lastRef","source","CancelToken","makeRequest","then","data","artists","items","next","catch","error","cancel","playContext","body","context_uri","request","response","status","setTimeout","playContextTrack","trackUri","offset","display","length","backgroundColor","URLSearchParams","search","get"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext} from 'react'\nimport axios from 'axios'\nimport {useLocation} from 'react-router-dom'\n\n\nimport PageBanner from '../featured-components/PageBanner'\nimport PlayListFunctions from '../featured-components/PlayListFunctions'\nimport TrackList from '../featured-components/TrackList'\nimport Loading from '../featured-components/Loading'\n\nimport useId from '../../utilities/hooks/useId'\nimport useInfiScroll from '../../utilities/hooks/useInfiScroll'\nimport {TokenContext, MessageContext, PlayContext} from '../../utilities/context'\nimport putWithToken from '../../utilities/putWithToken'\nimport makeAxiosRequest from '../../utilities/makeAxiosRequest'\n\nexport default function AlbumPage() {\n    const id = useId()\n    const token = useContext(TokenContext)\n    const setMessage = useContext(MessageContext)\n    const updatePlayer = useContext(PlayContext)\n    const [loading, setLoading] = useState(true)\n\n    const highlight = useHighlight()\n\n    const [bannerInfo, setbannerInfo] = useState({\n        album_type: '',\n        name: '',\n        description: '',\n        user: [],\n        followers: 0,\n        primary_color: '#262626',\n        images: [],\n        release_date: ''\n    })\n\n    const [tracks, setTracks] = useState([])\n    const [uri, setUri] = useState('')\n    const [setNext, lastRef] = useInfiScroll(setTracks)\n    const source = axios.CancelToken.source()\n\n    useEffect(() => {\n        setTracks([])\n        setNext(null)\n        setbannerInfo({\n            album_type: '',\n            name: '',\n            description: '',\n            user: [],\n            followers: 0,\n            primary_color: '#262626',\n            images: [],\n            release_date: ''\n        })\n        setUri('')\n        setLoading(true)\n        const [source, makeRequest] = makeAxiosRequest(`https://api.spotify.com/v1/albums/${id}`)\n        if(id){\n            makeRequest()\n            .then((data) => {\n                const {album_type, name, artists, primary_color, tracks, images, release_date, uri} = data\n                setbannerInfo(bannerInfo => ({...bannerInfo, album_type, name, user:artists, primary_color, images, release_date}))\n                setTracks(tracks.items)\n                setNext(tracks.next)\n                setUri(uri)\n                setLoading(false)\n            })\n            .catch((error) => {\n                setLoading(false)\n                setMessage(`ERROR: ${error}`)\n            })\n        }\n        \n        \n        return () => source.cancel()\n    // eslint-disable-next-line\n    }, [id])\n\n    const playContext = () => {\n        const body = {\n            context_uri: uri\n        }\n        const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body)\n        request()\n            .then(response => {\n                if (response.status === 204){\n                    setTimeout(() => updatePlayer(), 500)\n                }else{\n                    setMessage(`ERROR: Something went wrong! Server response: ${response.status}`)\n                }\n            })\n            .catch(error => setMessage(`ERROR: ${error}`))\n    }\n\n    const playContextTrack = (trackUri) => {\n        const body = {\n            context_uri: uri,\n            offset: {uri: trackUri}\n        }\n        const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body)\n        request()\n            .then(response => {\n                if (response.status === 204){\n                    setTimeout(() => updatePlayer(), 500)\n                }else{\n                    setMessage(`ERROR: Something went wrong! Server response: ${response.status}`)\n                }\n            })\n            .catch(error => setMessage(`ERROR: ${error}`))\n    }\n\n    return (\n        loading? \n        <Loading />\n        :\n        <div className='listPage' style={{display: `${tracks.length===0? 'none':'block'}`}}>\n            <PageBanner pageTitle={bannerInfo.album_type} bannerInfo={bannerInfo}/>\n            <div className=\"playListContent\">\n                <div className=\"playListOverlay\" style={{backgroundColor: `${bannerInfo.primary_color}`}}></div>\n                <PlayListFunctions onFollow={() => setMessage('Oops looks like the Spotify API does not support following albums')} setMessage={setMessage} playContext={playContext}/>\n                <div className=\"page-content\">\n                    <TrackList ref={lastRef} tracks={tracks} highlight={highlight} playContextTrack={playContextTrack}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\nfunction useHighlight(){\n    return new URLSearchParams(useLocation().search).get('highlight')\n}"]},"metadata":{},"sourceType":"module"}
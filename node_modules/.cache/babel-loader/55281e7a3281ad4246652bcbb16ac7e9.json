{"ast":null,"code":"var _jsxFileName = \"/home/thinesh/project/spotify-clone-client/src/components/footer-components/NowPlaying.js\";\nimport React, { useContext } from 'react';\nimport Icon from '../icons';\nimport { MessageContext } from '../../utilities/context';\nexport default function NowPlaying({\n  playInfo\n}) {\n  const setMessage = useContext(MessageContext);\n  const {\n    album,\n    artists,\n    name,\n    id\n  } = playInfo;\n  let imageUrl;\n\n  if (album.images && album.images.length !== 0) {\n    imageUrl = album.images[album.images.length - 1].url;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"now-playing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player-cover\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, imageUrl ? /*#__PURE__*/React.createElement(\"img\", {\n    draggable: \"false\",\n    loading: \"eager\",\n    src: imageUrl,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"Music2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player-info\",\n    style: {\n      display: name === '' ? 'none' : null\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player-info-track ellipsis-one-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: `/album/${album.id}?highlight=${id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  }, name)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player-info-artist ellipsis-one-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, artists.map((artist, index) => {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      href: `/artist/${artist.id}`,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 32\n      }\n    }, artist.name);\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"player-like\",\n    style: {\n      display: name === '' ? 'none' : null\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    title: \"Save to your Liked Songs\",\n    className: \"player-like-button no-outline\",\n    onClick: () => setMessage('Oops, it look like I chose not to implement this feature :)'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    name: \"Heart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/home/thinesh/project/spotify-clone-client/src/components/footer-components/NowPlaying.js"],"names":["React","useContext","Icon","MessageContext","NowPlaying","playInfo","setMessage","album","artists","name","id","imageUrl","images","length","url","display","map","artist","index"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,UAAjB;AAEA,SAASC,cAAT,QAA+B,yBAA/B;AAGA,eAAe,SAASC,UAAT,CAAoB;AAACC,EAAAA;AAAD,CAApB,EAAgC;AAC3C,QAAMC,UAAU,GAAGL,UAAU,CAACE,cAAD,CAA7B;AACA,QAAM;AAACI,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,IAAjB;AAAuBC,IAAAA;AAAvB,MAA6BL,QAAnC;AAEA,MAAIM,QAAJ;;AACA,MAAIJ,KAAK,CAACK,MAAN,IAAgBL,KAAK,CAACK,MAAN,CAAaC,MAAb,KAAwB,CAA5C,EAA8C;AAC1CF,IAAAA,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAaL,KAAK,CAACK,MAAN,CAAaC,MAAb,GAAsB,CAAnC,EAAsCC,GAAjD;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,QAAQ,gBACL;AAAK,IAAA,SAAS,EAAC,OAAf;AAAuB,IAAA,OAAO,EAAC,OAA/B;AAAuC,IAAA,GAAG,EAAEA,QAA5C;AAAsD,IAAA,GAAG,EAAC,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,gBAGL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAJR,CAFJ,eAYI;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,KAAK,EAAE;AAACI,MAAAA,OAAO,EAAEN,IAAI,KAAK,EAAT,GAAa,MAAb,GAAoB;AAA9B,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,IAAI,EAAG,UAASF,KAAK,CAACG,EAAG,cAAaA,EAAG,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgDD,IAAhD,CADJ,CAFJ,eAMI;AAAK,IAAA,SAAS,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,OAAO,CAACQ,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC5B,wBAAO;AAAG,MAAA,IAAI,EAAG,WAAUD,MAAM,CAACP,EAAG,EAA9B;AAAiC,MAAA,GAAG,EAAEQ,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8CD,MAAM,CAACR,IAArD,CAAP;AACH,GAFA,CADL,CANJ,CAZJ,eA0BI;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,KAAK,EAAE;AAACM,MAAAA,OAAO,EAAEN,IAAI,KAAK,EAAT,GAAa,MAAb,GAAoB;AAA9B,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,KAAK,EAAC,0BAAd;AAAyC,IAAA,SAAS,EAAC,+BAAnD;AAAmF,IAAA,OAAO,EAAE,MAAMH,UAAU,CAAC,6DAAD,CAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CA1BJ,CADJ;AAmCH","sourcesContent":["import React, {useContext} from 'react'\nimport Icon from '../icons'\n\nimport { MessageContext } from '../../utilities/context';\n\n\nexport default function NowPlaying({playInfo}) {\n    const setMessage = useContext(MessageContext)\n    const {album, artists, name, id} = playInfo\n\n    let imageUrl\n    if (album.images && album.images.length !== 0){\n        imageUrl = album.images[album.images.length - 1].url\n    }\n\n    return (\n        <div className=\"now-playing\">\n\n            <div className=\"player-cover\">\n                {imageUrl ? \n                    <img draggable=\"false\" loading=\"eager\" src={imageUrl} alt=\"\"></img>\n                    :\n                    <div>\n                        <Icon name='Music2'/>\n                    </div>\n                }\n            </div>\n\n            <div className=\"player-info\" style={{display: name === ''? 'none':null}}>\n\n                <div className=\"player-info-track ellipsis-one-line\">\n                    <a href={`/album/${album.id}?highlight=${id}`}>{name}</a>\n                </div>\n\n                <div className=\"player-info-artist ellipsis-one-line\">\n                    {artists.map((artist, index) => {  \n                        return <a href={`/artist/${artist.id}`} key={index}>{artist.name}</a>\n                    })} \n                </div>\n\n            </div>\n\n            <div className=\"player-like\" style={{display: name === ''? 'none':null}}>\n                <button title='Save to your Liked Songs' className=\"player-like-button no-outline\" onClick={() => setMessage('Oops, it look like I chose not to implement this feature :)')}>\n                    <Icon name='Heart' />\n                </button>\n            </div>\n        \n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}
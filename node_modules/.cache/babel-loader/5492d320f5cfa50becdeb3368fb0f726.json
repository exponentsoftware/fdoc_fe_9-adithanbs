{"ast":null,"code":"var _jsxFileName = \"/home/thinesh/project/spotify-clone-client/src/components/pages-components/PlayListPage.js\";\nimport React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport PageBanner from '../featured-components/PageBanner';\nimport PlayListFunctions from '../featured-components/PlayListFunctions';\nimport TrackList from '../featured-components/TrackList';\nimport Loading from '../featured-components/Loading';\nimport makeAxiosRequest from '../../utilities/makeAxiosRequest';\nimport { TokenContext, LoginContext, MessageContext, PlayContext } from '../../utilities/context';\nimport useId from '../../utilities/hooks/useId';\nimport useInfiScroll from '../../utilities/hooks/useInfiScroll';\nimport putWithToken from '../../utilities/putWithToken';\nexport default function PlayListPage({\n  playlists,\n  refreshPlaylist\n}) {\n  const id = useId('playlist');\n  const loggedIn = useContext(LoginContext);\n  const token = useContext(TokenContext);\n  const setMessage = useContext(MessageContext);\n  const updatePlayer = useContext(PlayContext);\n  const [loading, setLoading] = useState(true);\n  const [bannerInfo, setbannerInfo] = useState({\n    name: '',\n    description: '',\n    user: [],\n    followers: 0,\n    primary_color: '#262626',\n    images: []\n  });\n  const [tracks, setTracks] = useState([]);\n  const [like, setLike] = useState(false);\n  const [setNext, lastRef] = useInfiScroll(setTracks);\n  const [uri, setUri] = useState('');\n  const source = axios.CancelToken.source();\n  useEffect(() => {\n    setLike(false);\n    setUri('');\n    setbannerInfo({\n      name: '',\n      description: '',\n      user: [],\n      followers: 0,\n      primary_color: '#262626',\n      images: []\n    });\n    setTracks([]);\n    setLoading(true);\n    const [playSource, makeRequest] = makeAxiosRequest(`https://api.spotify.com/v1/playlists/${id}`);\n\n    if (id) {\n      makeRequest().then(data => {\n        const {\n          name,\n          description,\n          owner,\n          followers,\n          primary_color,\n          tracks,\n          images,\n          uri\n        } = data;\n        setbannerInfo(bannerInfo => ({ ...bannerInfo,\n          name,\n          description,\n          user: [owner],\n          followers,\n          primary_color,\n          images\n        }));\n        setTracks(tracks.items.map(track => track.track));\n        setNext(tracks.next);\n        setUri(uri);\n        setLoading(false);\n      }).catch(error => {\n        setLoading(false);\n        setMessage(`ERROR: ${error}`);\n      });\n    }\n\n    if (loggedIn && id) {\n      const playlistIds = playlists.map(playlist => {\n        return playlist.id;\n      });\n\n      if (playlistIds.includes(id)) {\n        setLike(true);\n      }\n    }\n\n    return () => {\n      playSource.cancel();\n      source.cancel();\n    }; // eslint-disable-next-line\n  }, [id, loggedIn]);\n\n  const followPlaylist = () => {\n    const followReq = putWithToken(`https://api.spotify.com/v1/playlists/${id}/followers`, token, source, {}, like ? 'DELETE' : 'PUT');\n    followReq().then(response => {\n      if (response.status === 200) {\n        if (like) {\n          setMessage('Removed from your Library');\n        } else {\n          setMessage('Added to your Library');\n        }\n\n        setLike(!like);\n        setTimeout(() => refreshPlaylist(), 1000);\n      } else {\n        setMessage(`ERROR: Something went wrong! Server response: ${response.status}`);\n      }\n    }).catch(error => setMessage(`ERROR: ${error}`));\n  };\n\n  const playContext = () => {\n    const body = {\n      context_uri: uri\n    };\n    const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body);\n    request().then(response => {\n      if (response.status === 204) {\n        setTimeout(() => updatePlayer(), 500);\n      } else {\n        setMessage(`ERROR: Something went wrong! Server response: ${response.status}`);\n      }\n    }).catch(error => setMessage(`ERROR: ${error}`));\n  };\n\n  const playContextTrack = trackUri => {\n    const body = {\n      context_uri: uri,\n      offset: {\n        uri: trackUri\n      }\n    };\n    const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body);\n    request().then(response => {\n      if (response.status === 204) {\n        setTimeout(() => updatePlayer(), 500);\n      } else {\n        setMessage(`ERROR: Something went wrong! Server response: ${response.status}`);\n      }\n    }).catch(error => setMessage(`ERROR: ${error}`));\n  };\n\n  return loading ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listPage\",\n    style: {\n      display: `${tracks.length === 0 ? 'none' : 'block'}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageBanner, {\n    pageTitle: \"playlist\",\n    bannerInfo: bannerInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playListContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playListOverlay\",\n    style: {\n      backgroundColor: `${bannerInfo.primary_color}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(PlayListFunctions, {\n    onFollow: followPlaylist,\n    follow: like,\n    setMessage: setMessage,\n    playContext: playContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TrackList, {\n    ref: lastRef,\n    tracks: tracks,\n    playContextTrack: playContextTrack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 21\n    }\n  }))));\n}","map":{"version":3,"sources":["/home/thinesh/project/spotify-clone-client/src/components/pages-components/PlayListPage.js"],"names":["React","useEffect","useState","useContext","axios","PageBanner","PlayListFunctions","TrackList","Loading","makeAxiosRequest","TokenContext","LoginContext","MessageContext","PlayContext","useId","useInfiScroll","putWithToken","PlayListPage","playlists","refreshPlaylist","id","loggedIn","token","setMessage","updatePlayer","loading","setLoading","bannerInfo","setbannerInfo","name","description","user","followers","primary_color","images","tracks","setTracks","like","setLike","setNext","lastRef","uri","setUri","source","CancelToken","playSource","makeRequest","then","data","owner","items","map","track","next","catch","error","playlistIds","playlist","includes","cancel","followPlaylist","followReq","response","status","setTimeout","playContext","body","context_uri","request","playContextTrack","trackUri","offset","display","length","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext} from 'react'\nimport axios from 'axios'\n\nimport PageBanner from '../featured-components/PageBanner'\nimport PlayListFunctions from '../featured-components/PlayListFunctions'\nimport TrackList from '../featured-components/TrackList'\nimport Loading from '../featured-components/Loading'\n\nimport makeAxiosRequest from '../../utilities/makeAxiosRequest'\nimport {TokenContext, LoginContext, MessageContext, PlayContext} from '../../utilities/context'\nimport useId from '../../utilities/hooks/useId'\nimport useInfiScroll from '../../utilities/hooks/useInfiScroll'\nimport putWithToken from '../../utilities/putWithToken'\n\nexport default function PlayListPage({playlists, refreshPlaylist}) {\n    const id = useId('playlist')\n    const loggedIn = useContext(LoginContext)\n    const token = useContext(TokenContext)\n    const setMessage = useContext(MessageContext)\n    const updatePlayer = useContext(PlayContext)\n\n    const [loading, setLoading] = useState(true)\n\n    const [bannerInfo, setbannerInfo] = useState({\n        name: '',\n        description: '',\n        user: [],\n        followers: 0,\n        primary_color: '#262626',\n        images: [],\n    })\n    const [tracks, setTracks] = useState([])\n    const [like, setLike] = useState(false)\n    const [setNext, lastRef] = useInfiScroll(setTracks)\n    const [uri, setUri] = useState('')\n    const source = axios.CancelToken.source()\n\n    useEffect(() => {\n        setLike(false)\n        setUri('')\n        setbannerInfo({\n            name: '',\n            description: '',\n            user: [],\n            followers: 0,\n            primary_color: '#262626',\n            images: [], \n        })\n        setTracks([])\n        setLoading(true)\n\n        const [playSource, makeRequest] = makeAxiosRequest(`https://api.spotify.com/v1/playlists/${id}`)\n\n        if (id){\n            makeRequest()\n            .then((data) => {\n                const {name, description, owner, followers, primary_color, tracks, images, uri} = data\n                setbannerInfo(bannerInfo => ({...bannerInfo, name, description, user:[owner], followers, primary_color, images}))\n                setTracks(tracks.items.map((track) => track.track))\n                setNext(tracks.next)\n                setUri(uri)\n                setLoading(false)\n            })\n            .catch((error) => {\n                setLoading(false)\n                setMessage(`ERROR: ${error}`)\n            })\n        }\n        \n        \n        if (loggedIn && id){\n            const playlistIds = playlists.map((playlist) => {\n                return playlist.id\n            })\n            if (playlistIds.includes(id)){\n                setLike(true)\n            }\n        }\n\n        return () => {\n            playSource.cancel()\n            source.cancel()\n        }\n    // eslint-disable-next-line\n    }, [id, loggedIn])\n\n    const followPlaylist = () => {\n        const followReq = putWithToken(`https://api.spotify.com/v1/playlists/${id}/followers`, token, source, {}, like?'DELETE':'PUT')\n        followReq()\n            .then(response => {\n                if (response.status === 200){\n                    if(like){\n                        setMessage('Removed from your Library')\n                    }else{\n                        setMessage('Added to your Library')\n                    }\n                    setLike(!like)\n                    setTimeout(() => refreshPlaylist(), 1000)\n                }else{\n                    setMessage(`ERROR: Something went wrong! Server response: ${response.status}`)\n                }\n            })\n            .catch(error => setMessage(`ERROR: ${error}`))\n    }\n\n    const playContext = () => {\n        const body = {\n            context_uri: uri\n        }\n        const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body)\n        request()\n            .then(response => {\n                if (response.status === 204){\n                    setTimeout(() => updatePlayer(), 500)\n                }else{\n                    setMessage(`ERROR: Something went wrong! Server response: ${response.status}`)\n                }\n            })\n            .catch(error => setMessage(`ERROR: ${error}`))\n    }\n\n    const playContextTrack = (trackUri) => {\n        const body = {\n            context_uri: uri,\n            offset: {uri: trackUri}\n        }\n        const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body)\n        request()\n            .then(response => {\n                if (response.status === 204){\n                    setTimeout(() => updatePlayer(), 500)\n                }else{\n                    setMessage(`ERROR: Something went wrong! Server response: ${response.status}`)\n                }\n            })\n            .catch(error => setMessage(`ERROR: ${error}`))\n    }\n\n    return (\n        loading? \n        <Loading />\n        : \n        <div className='listPage' style={{display: `${tracks.length===0? 'none':'block'}`}}>\n            <PageBanner pageTitle='playlist' bannerInfo={bannerInfo}/>\n            <div className=\"playListContent\">\n                <div className=\"playListOverlay\" style={{backgroundColor: `${bannerInfo.primary_color}`}}></div>\n                <PlayListFunctions onFollow={followPlaylist} follow={like} setMessage={setMessage} playContext={playContext}/>\n                <div className=\"page-content\">\n                    <TrackList ref={lastRef} tracks={tracks} playContextTrack={playContextTrack}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}
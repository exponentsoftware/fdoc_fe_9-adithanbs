{"ast":null,"code":"var _jsxFileName = \"/home/thinesh/project/spotify-clone-client/src/components/pages-components/HomePage.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport CollectionRow from '../featured-components/CollectionRow';\nimport makeAxiosRequest from '../../utilities/makeAxiosRequest';\nimport getLocale from '../../utilities/locale';\nimport { MessageContext } from '../../utilities/context';\nexport default function HomePage() {\n  const setMessage = useContext(MessageContext);\n  const [collections, setCollections] = useState([]);\n  const [temp, setTemp] = useState({});\n  const [playlistsMap, setplaylistMap] = useState({});\n  useEffect(() => {\n    const [language, locale] = getLocale();\n    const [source, makeRequest] = makeAxiosRequest(`https://api.spotify.com/v1/browse/categories?limit=6&country=${locale}&locale=${language}_${locale}`);\n    makeRequest().then(data => {\n      setCollections(data.categories.items);\n    }).catch(error => setMessage(`ERROR: ${error}`));\n    return () => source.cancel(); // eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    collections.map(collection => {\n      const {\n        name,\n        id\n      } = collection;\n      var [, makeRequest] = makeAxiosRequest(`https://api.spotify.com/v1/browse/categories/${id}/playlists?limit=9`);\n      makeRequest().then(data => {\n        const playlists = data.playlists.items;\n        setTemp(temp => ({\n          [name]: {\n            id,\n            playlists\n          }\n        }));\n      }).catch(error => setMessage(`ERROR: ${error}`));\n      return null;\n    }); // eslint-disable-next-line\n  }, [collections]);\n  useEffect(() => {\n    setplaylistMap(playlistsMap => ({ ...playlistsMap,\n      ...temp\n    })); // eslint-disable-next-line\n  }, [temp]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pageContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CollectionRow, {\n    name: \"Uniquely Yours\",\n    id: null,\n    playlists: [{\n      id: '',\n      to: '/tracks',\n      description: '',\n      name: 'Liked Songs',\n      images: [{\n        url: 'https://misc.scdn.co/liked-songs/liked-songs-300.png'\n      }]\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }), Object.entries(playlistsMap).map(([name, info]) => {\n    const {\n      id,\n      playlists\n    } = info;\n    return /*#__PURE__*/React.createElement(CollectionRow, {\n      name: name,\n      key: id,\n      id: id,\n      playlists: playlists,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 32\n      }\n    });\n  })));\n}","map":{"version":3,"sources":["/home/thinesh/project/spotify-clone-client/src/components/pages-components/HomePage.js"],"names":["React","useState","useEffect","useContext","CollectionRow","makeAxiosRequest","getLocale","MessageContext","HomePage","setMessage","collections","setCollections","temp","setTemp","playlistsMap","setplaylistMap","language","locale","source","makeRequest","then","data","categories","items","catch","error","cancel","map","collection","name","id","playlists","to","description","images","url","Object","entries","info"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext} from 'react'\n\nimport CollectionRow from '../featured-components/CollectionRow'\n\nimport makeAxiosRequest from '../../utilities/makeAxiosRequest'\nimport getLocale from '../../utilities/locale'\nimport { MessageContext } from '../../utilities/context'\n\n\nexport default function HomePage() {\n    const setMessage = useContext(MessageContext)\n    const [collections, setCollections] = useState([])\n    const [temp, setTemp] = useState({})\n    const [playlistsMap, setplaylistMap] = useState({})\n\n    \n    useEffect(() => {\n        const [language, locale] = getLocale()\n        const [source, makeRequest] = makeAxiosRequest(`https://api.spotify.com/v1/browse/categories?limit=6&country=${locale}&locale=${language}_${locale}`)\n        makeRequest()\n            .then((data) => {\n                setCollections(data.categories.items)\n            })\n            .catch((error) => setMessage(`ERROR: ${error}`))\n        \n        return () => source.cancel()\n    // eslint-disable-next-line\n    }, [])\n\n    useEffect(() => {\n        collections.map((collection) => {\n            const {name, id} = collection\n            var [, makeRequest] = makeAxiosRequest(`https://api.spotify.com/v1/browse/categories/${id}/playlists?limit=9`)\n            makeRequest()\n                .then((data) => {\n                    const playlists = data.playlists.items\n                    setTemp(temp => ({[name]: {id, playlists}}))\n                })\n                .catch((error) => setMessage(`ERROR: ${error}`))\n            return null\n        })\n    // eslint-disable-next-line\n    }, [collections])\n\n\n    useEffect(() => {\n        setplaylistMap(playlistsMap => ({...playlistsMap, ...temp}))\n    // eslint-disable-next-line\n    }, [temp])\n\n    return (\n        <div className=\"page-content\">\n            <div className='pageContent'>\n                <CollectionRow name='Uniquely Yours' id={null} playlists={[{id:'', to:'/tracks', description:'', name:'Liked Songs', images:[{url: 'https://misc.scdn.co/liked-songs/liked-songs-300.png'}]}]}/>\n                {   \n                    Object.entries(playlistsMap).map(([name, info]) => {\n                        const {id, playlists} = info\n                        return <CollectionRow name={name} key={id} id={id} playlists={playlists}/>\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}
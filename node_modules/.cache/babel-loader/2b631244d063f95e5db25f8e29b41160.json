{"ast":null,"code":"// eslint-disable-next-line\nimport React, { useState, useRef, useCallback } from 'react';\nimport makeAxiosRequest from '../makeAxiosRequest';\n\nfunction useInfiScroll(setList) {\n  const [next, setNext] = useState(null);\n  const observer = useRef();\n  const lastRef = useCallback(node => {\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && next) {\n        const [, makeRequest] = makeAxiosRequest(next);\n        makeRequest().then(data => {\n          let resultList, next;\n\n          if (data.items && data.items[0].track) {\n            resultList = data.items.map(track => track.track);\n          } else {\n            resultList = data.items || data.playlists.items;\n          }\n\n          if (data.playlists) {\n            next = data.playlists.next;\n          } else {\n            next = data.next;\n          }\n\n          setList(tracks => [...tracks, ...resultList]);\n          setNext(next);\n        }).catch(error => console.log(error));\n      }\n    }, {\n      threshold: 0.75\n    });\n    if (node) observer.current.observe(node); // eslint-disable-next-line\n  }, [next]);\n  return [setNext, lastRef];\n}\n\nexport default useInfiScroll;","map":{"version":3,"sources":["/home/thinesh/project/spotify-clone-client/src/utilities/hooks/useInfiScroll.js"],"names":["React","useState","useRef","useCallback","makeAxiosRequest","useInfiScroll","setList","next","setNext","observer","lastRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","makeRequest","then","data","resultList","items","track","map","playlists","tracks","catch","error","console","log","threshold","observe"],"mappings":"AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,WAAlC,QAAqD,OAArD;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;;AAEA,SAASC,aAAT,CAAuBC,OAAvB,EAA+B;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AAEA,QAAMQ,QAAQ,GAAGP,MAAM,EAAvB;AACA,QAAMQ,OAAO,GAAGP,WAAW,CAACQ,IAAI,IAAI;AAChC,QAAIF,QAAQ,CAACG,OAAb,EAAsBH,QAAQ,CAACG,OAAT,CAAiBC,UAAjB;AACtBJ,IAAAA,QAAQ,CAACG,OAAT,GAAmB,IAAIE,oBAAJ,CAAyBC,OAAO,IAAI;AACnD,UAAGA,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAX,IAA6BT,IAAhC,EAAqC;AACjC,cAAM,GAAGU,WAAH,IAAkBb,gBAAgB,CAACG,IAAD,CAAxC;AACAU,QAAAA,WAAW,GACNC,IADL,CACUC,IAAI,IAAI;AACV,cAAIC,UAAJ,EAAgBb,IAAhB;;AACA,cAAIY,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcC,KAAhC,EAAsC;AAClCF,YAAAA,UAAU,GAAGD,IAAI,CAACE,KAAL,CAAWE,GAAX,CAAeD,KAAK,IAAIA,KAAK,CAACA,KAA9B,CAAb;AACH,WAFD,MAEK;AACDF,YAAAA,UAAU,GAAGD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACK,SAAL,CAAeH,KAA1C;AACH;;AAED,cAAIF,IAAI,CAACK,SAAT,EAAmB;AACfjB,YAAAA,IAAI,GAAGY,IAAI,CAACK,SAAL,CAAejB,IAAtB;AACH,WAFD,MAEK;AACDA,YAAAA,IAAI,GAAGY,IAAI,CAACZ,IAAZ;AACH;;AAEDD,UAAAA,OAAO,CAACmB,MAAM,IAAI,CAAC,GAAGA,MAAJ,EAAY,GAAGL,UAAf,CAAX,CAAP;AACAZ,UAAAA,OAAO,CAACD,IAAD,CAAP;AACH,SAjBL,EAkBKmB,KAlBL,CAkBWC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAlBpB;AAmBH;AACJ,KAvBkB,EAuBhB;AAACG,MAAAA,SAAS,EAAE;AAAZ,KAvBgB,CAAnB;AAwBA,QAAInB,IAAJ,EAAUF,QAAQ,CAACG,OAAT,CAAiBmB,OAAjB,CAAyBpB,IAAzB,EA1BsB,CA2BpC;AACC,GA5B0B,EA4BxB,CAACJ,IAAD,CA5BwB,CAA3B;AA8BA,SAAO,CAACC,OAAD,EAAUE,OAAV,CAAP;AACH;;AAED,eAAeL,aAAf","sourcesContent":["// eslint-disable-next-line\nimport React, { useState, useRef, useCallback } from 'react';\nimport makeAxiosRequest from '../makeAxiosRequest'\n\nfunction useInfiScroll(setList){\n    const [next, setNext] = useState(null) \n\n    const observer = useRef()\n    const lastRef = useCallback(node => {\n        if (observer.current) observer.current.disconnect()\n        observer.current = new IntersectionObserver(entries => {\n            if(entries[0].isIntersecting && next){\n                const [, makeRequest] = makeAxiosRequest(next)\n                makeRequest()\n                    .then(data => {\n                        let resultList, next\n                        if (data.items && data.items[0].track){\n                            resultList = data.items.map(track => track.track)\n                        }else{\n                            resultList = data.items || data.playlists.items\n                        }\n\n                        if (data.playlists){\n                            next = data.playlists.next\n                        }else{\n                            next = data.next\n                        }\n\n                        setList(tracks => [...tracks, ...resultList])\n                        setNext(next)\n                    })\n                    .catch(error => console.log(error))\n            }\n        }, {threshold: 0.75})\n        if (node) observer.current.observe(node)\n    // eslint-disable-next-line\n    }, [next])\n\n    return [setNext, lastRef]\n}\n\nexport default useInfiScroll"]},"metadata":{},"sourceType":"module"}
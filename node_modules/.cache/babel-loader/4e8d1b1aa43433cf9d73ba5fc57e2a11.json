{"ast":null,"code":"var _jsxFileName = \"/home/thinesh/project/spotify-clone-client/src/components/pages-components/LikePage.js\";\nimport React from 'react';\nimport { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport PageBanner from '../featured-components/PageBanner';\nimport PlayListFunctions from '../featured-components/PlayListFunctions';\nimport TrackList from '../featured-components/TrackList';\nimport { TokenContext, UserContext } from '../../utilities/context';\nimport useTokenScroll from '../../utilities/hooks/useTokenScroll';\nimport reqWithToken from '../../utilities/reqWithToken';\nimport putWithToken from '../../utilities/putWithToken';\n\nconst LikePage = () => {\n  const token = useContext(TokenContext);\n  const user = useContext(UserContext);\n  const bannerInfo = {\n    name: 'Liked Songs',\n    description: '',\n    user: [user],\n    followers: 0,\n    primary_color: 'rgb(70, 62, 118)',\n    images: [{\n      url: 'https://t.scdn.co/images/3099b3803ad9496896c43f22fe9be8c4.png'\n    }]\n  };\n  const [tracks, setTracks] = useState([]);\n  const source = axios.CancelToken.source();\n  const [setNext, lastRef] = useTokenScroll(setTracks, token, source);\n  useEffect(() => {\n    const requestPlaylist = reqWithToken('https://api.spotify.com/v1/me/tracks?limit=50', token, source);\n    requestPlaylist().then(data => {\n      const _tracks = data.data.items;\n      setTracks(tracks => [...tracks, ..._tracks.map(track => track.track)]);\n      setNext(data.data.next);\n    }).catch(error => console.log(error));\n    return () => source.cancel(); // eslint-disable-next-line\n  }, []);\n\n  const playTracks = trackUri => {\n    const track_uris = tracks.map(track => {\n      return track.uri;\n    });\n    const body = {\n      uris: track_uris\n    };\n    const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body);\n    request().then(response => {\n      console.log(response);\n    }).catch(error => console.log(error));\n  };\n\n  const playTrack = uri => {\n    const body = {\n      uris: [uri]\n    };\n    const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body);\n    request().then(response => {\n      console.log(response);\n    }).catch(error => console.log(error));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"listPage\",\n    style: {\n      display: `${tracks.length === 0 ? 'none' : 'block'}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageBanner, {\n    pageTitle: \"playlist\",\n    bannerInfo: bannerInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playListContent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"playListOverlay\",\n    style: {\n      backgroundColor: `${bannerInfo.primary_color}`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(PlayListFunctions, {\n    type: \"playOnly\",\n    playContext: playTracks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"page-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TrackList, {\n    ref: lastRef,\n    tracks: tracks,\n    playContextTrack: playTrack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default LikePage;","map":{"version":3,"sources":["/home/thinesh/project/spotify-clone-client/src/components/pages-components/LikePage.js"],"names":["React","useEffect","useState","useContext","axios","PageBanner","PlayListFunctions","TrackList","TokenContext","UserContext","useTokenScroll","reqWithToken","putWithToken","LikePage","token","user","bannerInfo","name","description","followers","primary_color","images","url","tracks","setTracks","source","CancelToken","setNext","lastRef","requestPlaylist","then","data","_tracks","items","map","track","next","catch","error","console","log","cancel","playTracks","trackUri","track_uris","uri","body","uris","request","response","playTrack","display","length","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useEffect, useState, useContext} from 'react'\nimport axios from 'axios'\n\nimport PageBanner from '../featured-components/PageBanner'\nimport PlayListFunctions from '../featured-components/PlayListFunctions'\nimport TrackList from '../featured-components/TrackList'\n\nimport {TokenContext, UserContext} from '../../utilities/context'\nimport useTokenScroll from '../../utilities/hooks/useTokenScroll'\nimport reqWithToken from '../../utilities/reqWithToken'\nimport putWithToken from '../../utilities/putWithToken'\n\n\nconst LikePage = () => {\n    const token = useContext(TokenContext)\n    const user = useContext(UserContext)\n\n    const bannerInfo = {\n        name: 'Liked Songs',\n        description: '',\n        user: [user],\n        followers: 0,\n        primary_color: 'rgb(70, 62, 118)',\n        images: [{url: 'https://t.scdn.co/images/3099b3803ad9496896c43f22fe9be8c4.png'}],\n    }\n    const [tracks, setTracks] = useState([])\n    const source = axios.CancelToken.source()\n    const [setNext, lastRef] = useTokenScroll(setTracks, token, source)\n\n    useEffect(() => {\n        const requestPlaylist = reqWithToken('https://api.spotify.com/v1/me/tracks?limit=50', token, source)\n\n        requestPlaylist()\n            .then((data) => {\n                const _tracks = data.data.items\n                setTracks(tracks => [...tracks, ..._tracks.map((track) => track.track)])\n                setNext(data.data.next)\n            })\n            .catch((error) => console.log(error))\n        \n        return () => source.cancel()\n    // eslint-disable-next-line\n    }, [])\n\n    const playTracks = (trackUri) => {\n        const track_uris = tracks.map(track => {\n            return track.uri\n        })\n        const body = {\n            uris: track_uris\n        }\n\n        const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body)\n        request()\n            .then(response => {\n                console.log(response)\n            })\n            .catch(error => console.log(error))\n    }\n\n    const playTrack = (uri) => {\n        const body = {\n            uris: [uri]\n        }\n        const request = putWithToken(`https://api.spotify.com/v1/me/player/play`, token, source, body)\n        request()\n            .then(response => {\n                console.log(response)\n            })\n            .catch(error => console.log(error))\n    }\n\n    return (\n        <div className='listPage' style={{display: `${tracks.length===0? 'none':'block'}`}}>\n            <PageBanner pageTitle='playlist' bannerInfo={bannerInfo}/>\n            <div className=\"playListContent\">\n                <div className=\"playListOverlay\" style={{backgroundColor: `${bannerInfo.primary_color}`}}></div>\n                <PlayListFunctions type='playOnly' playContext={playTracks}/>\n                <div className=\"page-content\">\n                    <TrackList ref={lastRef} tracks={tracks} playContextTrack={playTrack}/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default LikePage;\n\n"]},"metadata":{},"sourceType":"module"}